"use client"

import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { useAccount } from "wagmi"
import { MockAsset, ConnectWalletModalProps, ReceiveAssetModalProps, SendAssetModalProps, SwapAssetsModalProps } from "@/types/wallet"
import { Asset as WalletAsset } from "@/lib/store/use-wallet-store"
import { Asset } from "@/types/wallet"
import { publicClient } from "@/wagmi.config"
import {
  Implementation,
  toMetaMaskSmartAccount,
  createDelegation,
  createCaveatBuilder,
  getDelegationHashOffchain,
  type MetaMaskSmartAccount,
  type DelegationStruct,
} from "@metamask/delegation-toolkit"
import { createWalletClient, custom, toHex, zeroAddress, type Hex, type Address } from "viem"
import { generatePrivateKey, privateKeyToAccount } from "viem/accounts"
import { randomBytes } from "crypto"
import { FACTORY_CONTRACT_ADDRESS, CREATE_TOKEN_SELECTOR } from "@/constants"
import { bundler, pimlicoClient } from "@/lib/services/bundler"
import { getDelegationStorageClient, DelegationStoreFilter } from "@/delegationStorage"
import { ConnectWalletCard } from "@/components/wallet/connect-wallet-card"
import { AssetCard } from "@/components/wallet/asset-card"
import { SendAssetModal } from "@/components/wallet/send-asset-modal"
import { ReceiveAssetModal } from "@/components/wallet/receive-asset-modal"
import { SwapAssetsModal } from "@/components/wallet/swap-assets-modal"
import { useWalletStore } from "@/lib/store/use-wallet-store"
import { SectionTitle } from "@/components/ui/typography"
import { Button } from "@/components/ui/button"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog"
import { Copy, Check, Sparkles, ArrowUpDown, ArrowUp, MessageSquare, Settings, ChevronDown, PieChart, Wallet, Bell, Zap, Lightbulb, ArrowDown } from "lucide-react"
import { useClipboard } from "@/lib/hooks/use-clipboard"
import { ConnectWalletModal } from "@/components/wallet/connect-wallet-modal"
import { QRCodeSVG } from "qrcode.react"
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Avatar } from "@/components/ui/avatar"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"
import { Input } from "@/components/ui/input"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      when: "beforeChildren",
      staggerChildren: 0.1
    }
  }
}

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: { type: "spring", stiffness: 100 }
  }
}

const fadeInVariants = {
  hidden: { opacity: 0 },
  visible: { opacity: 1, transition: { duration: 0.5 } }
}

const cardHoverVariants = {
  hover: {
    y: -5,
    boxShadow: "0 8px 16px rgba(0, 0, 0, 0.2)",
    transition: { duration: 0.3 }
  }
}

const gradientVariants = {
  initial: { opacity: 0.8 },
  animate: {
    opacity: 1,
    backgroundPosition: ["0% 50%", "100% 50%", "0% 50%"],
    transition: {
      backgroundPosition: { duration: 4, repeat: Infinity, ease: "linear" },
      opacity: { duration: 0.5 }
    }
  }
}

// Mock data for AI insights
const mockInsights = [
  { 
    id: 1, 
    title: "Portfolio Rebalance", 
    description: "Your portfolio is heavily weighted in ETH (80%). Consider diversifying to reduce risk.",
    impact: "high",
    type: "suggestion"
  },
  { 
    id: 2, 
    title: "Gas Optimization", 
    description: "Current gas prices are high. Consider scheduling non-urgent transactions for later.",
    impact: "medium",
    type: "alert"
  },
  { 
    id: 3, 
    title: "Yield Opportunity", 
    description: "Your USDC could earn 5.2% APY in the Aave protocol.",
    impact: "medium",
    type: "opportunity"
  },
  { 
    id: 4, 
    title: "Smart Savings", 
    description: "Based on your transaction patterns, you could save ~$12/month on gas fees by batching transfers.",
    impact: "low",
    type: "suggestion"
  }
]

// Mock data for recurring payments
const mockRecurringPayments = [
  {
    id: 1,
    name: "Crypto News Premium",
    amount: "10 USDC",
    frequency: "Monthly",
    nextPayment: "May 20, 2025",
    icon: "📰"
  },
  {
    id: 2,
    name: "NFT Marketplace Pro",
    amount: "0.01 ETH",
    frequency: "Monthly",
    nextPayment: "May 15, 2025",
    icon: "🖼️"
  }
]

// Mock data for AI chat messages
const initialMessages = [
  {
    role: "assistant",
    content: "Hello! I'm your AI financial assistant. How can I help you with your crypto today?"
  }
]

// Mock data for assets
const mockAssets: MockAsset[] = [
  { id: 1, name: "Ethereum", symbol: "ETH", balance: 2.5, usdValue: 7500.00, icon: "/assets/eth.svg" },
  { id: 2, name: "USD Coin", symbol: "USDC", balance: 4500.00, usdValue: 4500.00, icon: "/assets/usdc.svg" },
  { id: 3, name: "Polygon", symbol: "MATIC", balance: 1200.00, usdValue: 840.00, icon: "/assets/matic.svg" }
]

// Define a minimal interface for Ethereum Provider
interface EthereumProvider {
  request: (args: { method: string; params?: unknown[] }) => Promise<unknown>;
  on: (event: string, callback: (...args: unknown[]) => void) => void;
}

export default function WalletPageClient(): JSX.Element {
  const { isConnected: wagmiConnected, address: wagmiAddress } = useAccount()
  const { isConnected, address, assets: walletAssets, connectWallet } = useWalletStore()
  // Convert mock assets to the correct Asset type format
  const assets = walletAssets && walletAssets.length > 0 ? walletAssets : mockAssets.map(asset => ({
    id: asset.id.toString(), // Ensure id is always a string
    name: asset.name,
    symbol: asset.symbol,
    amount: asset.balance,
    value: asset.usdValue,
    price: asset.usdValue / asset.balance,
    change24h: 0, // Default value
    logo: asset.icon,
  })) as Asset[]
  
  // Delegation state
  const [delegatorAccount, setDelegatorAccount] = useState<MetaMaskSmartAccount<Implementation> | undefined>(undefined)
  const [aiDelegateAccount, setAiDelegateAccount] = useState<MetaMaskSmartAccount<Implementation> | undefined>(undefined)
  const [delegation, setDelegation] = useState<DelegationStruct | undefined>(undefined)
  const [isCreatingAccounts, setIsCreatingAccounts] = useState(false)
  const [isCreatingDelegation, setIsCreatingDelegation] = useState(false)
  const [delegationComplete, setDelegationComplete] = useState(false)
  const [delegationError, setDelegationError] = useState<string | null>(null)
  const [isDelegationModalOpen, setIsDelegationModalOpen] = useState(false)
  const { copy, hasCopied } = useClipboard()
  const [isSendModalOpen, setIsSendModalOpen] = useState(false)
  const [isReceiveModalOpen, setIsReceiveModalOpen] = useState(false)
  const [isSwapModalOpen, setIsSwapModalOpen] = useState(false)
  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)
  const [isConnectWalletModalOpen, setIsConnectWalletModalOpen] = useState(false)
  const [activeTab, setActiveTab] = useState("overview")
  const [showAIInsights, setShowAIInsights] = useState(true)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [messages, setMessages] = useState(initialMessages)
  const [inputMessage, setInputMessage] = useState("")
  const [portfolioScore, setPortfolioScore] = useState(78)
  const [showAISettings, setShowAISettings] = useState(false)

  // Simulate AI analyzing portfolio
  // Create a unique salt for account creation
  const createSalt = () => toHex(randomBytes(8))

  // Initialize accounts when user connects
  useEffect(() => {
    if (wagmiConnected && wagmiAddress) {
      // Clear previous state if user changes
      setDelegatorAccount(undefined)
      setAiDelegateAccount(undefined)
      setDelegation(undefined)
      setDelegationComplete(false)
      setDelegationError(null)
    }
  }, [wagmiAddress, wagmiConnected])

  // Create delegator and AI delegate accounts
  const setupAccounts = async () => {
    if (!wagmiConnected || !wagmiAddress) return

    setIsCreatingAccounts(true)
    setDelegationError(null)

    try {
      console.group("=== Setting up Delegation Accounts ===")

      // For delegator account, we'll use the connected wallet
      const provider = (window as Window & { ethereum?: EthereumProvider }).ethereum
      if (!provider) {
        throw new Error("No provider found. Please make sure MetaMask is installed and connected.")
      }

      console.log("Creating wallet client for address:", wagmiAddress)
      const walletClient = createWalletClient({
        transport: custom(provider),
        account: wagmiAddress as `0x${string}`,
      })

      // Create delegator smart account
      console.log("Creating delegator smart account...")
      const delegatorSmartAccount = await toMetaMaskSmartAccount({
        client: publicClient,
        implementation: Implementation.Hybrid,
        deployParams: [wagmiAddress, [], [], []],
        deploySalt: createSalt(),
        signatory: { walletClient },
      })
      console.log("Delegator account created:", delegatorSmartAccount.address)

      console.log("Deploying delegator account...")

      const { fast: fees } = await pimlicoClient.getUserOperationGasPrice()

      if (!delegatorSmartAccount.isDeployed) {
        const receipt = await bundler.sendUserOperation({
          account: delegatorSmartAccount,
          calls: [{ to: zeroAddress }],
          ...fees,
        })

        console.log("Delegator account deployed:", receipt)
      }

      // Create AI delegate account with a burner key
      console.log("Creating AI delegate account...")
      const aiPrivateKey = generatePrivateKey() // need to store this somewhere
      const aiAccount = privateKeyToAccount(aiPrivateKey)

      console.log("AI account:", aiAccount)
      console.log("Private key:", aiPrivateKey)

      const aiSmartAccount = await toMetaMaskSmartAccount({
        client: publicClient,
        implementation: Implementation.Hybrid,
        deployParams: [
          delegatorSmartAccount.address,
          [],
          [],
          [],
        ],
        deploySalt: "0x1231245", // need to store this somewhere to be able to access this wallet later
        signatory: { account: aiAccount },
      })
      console.log("AI delegate account created:", aiSmartAccount.address)

      // Store the AI account private key securely
      sessionStorage.setItem("aiDelegatePrivateKey", aiPrivateKey)
      console.log("AI private key stored in session storage")

      setDelegatorAccount(delegatorSmartAccount)
      setAiDelegateAccount(aiSmartAccount)
      console.groupEnd()
    } catch (error: unknown) {
      console.error("Error setting up accounts:", error)
      setDelegationError(
        `Failed to set up accounts: ${error instanceof Error ? error.message : "Unknown error"}`
      )
      console.groupEnd()
    } finally {
      setIsCreatingAccounts(false)
    }
  }

  // Create delegation with caveats
  const createDelegationWithCaveats = async () => {
    if (!delegatorAccount || !aiDelegateAccount) return

    setIsCreatingDelegation(true)
    setDelegationError(null)

    try {
      console.group("=== Creating Delegation with Caveats ===")

      // Add diagnostic logging
      console.log("FACTORY_CONTRACT_ADDRESS raw value:", FACTORY_CONTRACT_ADDRESS)
      console.log("FACTORY_CONTRACT_ADDRESS type:", typeof FACTORY_CONTRACT_ADDRESS)
      console.log("FACTORY_CONTRACT_ADDRESS length:", FACTORY_CONTRACT_ADDRESS?.length)
      console.log("Starts with 0x?", FACTORY_CONTRACT_ADDRESS?.startsWith("0x"))
      console.log("Address matches format?", /^0x[a-fA-F0-9]{40}$/.test(FACTORY_CONTRACT_ADDRESS || ""))

      // Build caveats that restrict what the AI can do
      console.log("Building caveats...")
      const caveats = createCaveatBuilder(delegatorAccount.environment)
        .addCaveat("allowedTargets", [FACTORY_CONTRACT_ADDRESS as `0x${string}`])
        .addCaveat("valueLte", BigInt(0))
        .addCaveat("allowedMethods", [CREATE_TOKEN_SELECTOR])
        .build()

      console.log("Caveats created:", {
        allowedTargets: [FACTORY_CONTRACT_ADDRESS],
        valueLte: "0",
        allowedMethods: [CREATE_TOKEN_SELECTOR],
      })

      // Create root delegation with a unique salt
      console.log("Creating root delegation...")
      const rootDelegation = await createDelegation({
        from: delegatorAccount.address as Hex,
        to: aiDelegateAccount.address as Hex,
        implementation: Implementation.EOA, // Use EOA implementation which is available in the toolkit
        salt: toHex(randomBytes(8)) as Hex,
        caveats
      })

      // Sign the delegation using the delegator account
      console.log("Signing delegation...")
      const signature = await delegatorAccount.signDelegation({
        delegation: rootDelegation,
      })

      const signedDelegation = {
        ...rootDelegation,
        signature,
      } as any

      console.log("Delegation signed successfully")

      // Store delegation in the delegation storage service
      try {
        const delegationStorageClient = getDelegationStorageClient()

        // Store the delegation in the delegation storage service
        try {
          console.log("Storing delegation in storage service...")
          const storedDelegation = await delegationStorageClient.storeDelegation(signedDelegation as any)
          console.log("Delegation stored in storage service successfully:", storedDelegation)
        } catch (storageError: any) {
          console.error("Failed to store delegation in storage service:", storageError)
          setDelegationError("Warning: Remote storage failed, but proceeding with local storage")
        }
      } catch (error: any) {
        console.error("Error in delegation storage:", error)
      }

      // Store delegation info in session storage
      const delegationHash = getDelegationHashOffchain(signedDelegation)
      const delegationInfo = {
        delegationHash,
        delegatorAddress: delegatorAccount.address,
        delegateAddress: aiDelegateAccount.address,
        timestamp: Date.now(),
      }

      sessionStorage.setItem("delegationInfo", JSON.stringify(delegationInfo))
      sessionStorage.setItem("delegation", JSON.stringify(signedDelegation))
      console.log("Delegation info stored in session storage")

      setDelegation(signedDelegation)

      setDelegationComplete(true)
      console.groupEnd()
    } catch (error: unknown) {
      console.error("Error creating delegation:", error)
      setDelegationError(
        `Failed to create delegation: ${error instanceof Error ? error.message : "Unknown error"}`
      )
      console.groupEnd()
    } finally {
      setIsCreatingDelegation(false)
    }
  }

  // Check if delegation exists in session storage
  const checkExistingDelegation = () => {
    const delegationInfo = sessionStorage.getItem("delegationInfo")
    const delegationData = sessionStorage.getItem("delegation")

    if (delegationInfo && delegationData) {
      try {
        const parsedInfo = JSON.parse(delegationInfo)
        const parsedDelegation = JSON.parse(delegationData)

        setDelegation(parsedDelegation)
        setDelegationComplete(true)
        return true
      } catch (error) {
        console.error("Error parsing delegation from session storage:", error)
      }
    }
    return false
  }

  // Handle delegation setup
  const handleDelegationSetup = async () => {
    setIsDelegationModalOpen(true)
    if (!checkExistingDelegation()) {
      await setupAccounts()
    }
  }

  // Handle delegation creation
  const handleCreateDelegation = async () => {
    if (!delegatorAccount || !aiDelegateAccount) {
      await setupAccounts()
    }
    await createDelegationWithCaveats()
  }

  const handleAnalyzePortfolio = () => {
    setIsAnalyzing(true)
    setTimeout(() => {
      setIsAnalyzing(false)
      setShowAIInsights(true)
    }, 2000)
  }

  const handleSendMessage = () => {
    if (inputMessage.trim() === "") return
    
    setMessages(prev => [...prev, { role: "user", content: inputMessage }])
    
    setTimeout(() => {
      let response
      if (inputMessage.toLowerCase().includes("swap")) {
        response = "I can help you swap tokens. Would you like me to find the best rate for a specific pair?"
      } else if (inputMessage.toLowerCase().includes("gas")) {
        response = "Current gas prices are around 25 gwei. Based on historical data, prices should be lower in about 3 hours."
      } else if (inputMessage.toLowerCase().includes("portfolio")) {
        response = "Your portfolio has grown 3.2% this week, outperforming BTC by 0.8%."
      } else {
        response = "Can you provide more details about what you'd like to know?"
      }
      
      setMessages(prev => [...prev, { role: "assistant", content: response }])
    }, 1000)
    
    setInputMessage("")
  }

  const handleConnectWallet = () => {
    setIsConnectWalletModalOpen(true)
  }

  const handleCloseConnectWalletModal = () => {
    setIsConnectWalletModalOpen(false)
  }

  const handleSendAsset = (asset: Asset) => {
    // Convert the asset type to ensure compatibility with the wallet store Asset type
    const compatibleAsset = {
      id: typeof asset.id === 'number' ? asset.id.toString() : asset.id,
      name: asset.name,
      symbol: asset.symbol,
      amount: asset.balance || asset.amount || 0,
      value: asset.usdValue || asset.value || 0,
      price: asset.price || (asset.balance && asset.usdValue ? asset.usdValue / asset.balance : 0),
      change24h: asset.change24h || 0,
      logo: asset.icon || asset.logo || ''
    } as unknown as import('@/lib/store/use-wallet-store').Asset
    setSelectedAsset(compatibleAsset)
    setIsSendModalOpen(true)
  }

  const handleReceiveAsset = (asset: Asset) => {
    // Convert the asset type to ensure compatibility with the wallet store Asset type
    const compatibleAsset = {
      id: typeof asset.id === 'number' ? asset.id.toString() : asset.id,
      name: asset.name,
      symbol: asset.symbol,
      amount: asset.balance || asset.amount || 0,
      value: asset.usdValue || asset.value || 0,
      price: asset.price || (asset.balance && asset.usdValue ? asset.usdValue / asset.balance : 0),
      change24h: asset.change24h || 0,
      logo: asset.icon || asset.logo || ''
    } as unknown as import('@/lib/store/use-wallet-store').Asset
    setSelectedAsset(compatibleAsset)
    setIsReceiveModalOpen(true)
  }

  const handleSwapAssets = (asset: Asset) => {
    // Convert the asset type to ensure compatibility with the wallet store Asset type
    const compatibleAsset = {
      id: typeof asset.id === 'number' ? asset.id.toString() : asset.id,
      name: asset.name,
      symbol: asset.symbol,
      amount: asset.balance || asset.amount || 0,
      value: asset.usdValue || asset.value || 0,
      price: asset.price || (asset.balance && asset.usdValue ? asset.usdValue / asset.balance : 0),
      change24h: asset.change24h || 0,
      logo: asset.icon || asset.logo || ''
    } as unknown as import('@/lib/store/use-wallet-store').Asset
    setSelectedAsset(compatibleAsset)
    setIsSwapModalOpen(true)
  }

  const handleCloseSendModal = () => {
    setIsSendModalOpen(false)
    setSelectedAsset(null)
  }

  const handleCloseReceiveModal = () => {
    setIsReceiveModalOpen(false)
    setSelectedAsset(null)
  }

  const handleCloseSwapModal = () => {
    setIsSwapModalOpen(false)
    setSelectedAsset(null)
  }

  // Demo wallet address for QR demo
  const demoWalletAddress = "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"

  return (
    <div className="flex-1 space-y-8 p-4 md:p-8 pt-6 bg-gradient-to-br from-gray-900 to-blue-900">
      <motion.div
        initial="hidden"
        animate="visible"
        variants={containerVariants}
        className="relative"
      >

      <motion.div variants={itemVariants}>
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6">
          <SectionTitle
            title="Bumblebee Wallet"
            subtitle="Smart financial management powered by AI"
            className="text-left"
            titleClassName="text-2xl md:text-3xl flex items-center text-white"
            subtitleClassName="text-sm md:text-base max-w-none text-left text-gray-300"
          />
          {isConnected && (
            <motion.div 
              className="flex items-center bg-white/10 backdrop-blur-md p-2 rounded-lg text-sm border border-white/20"
              variants={fadeInVariants}
            >
              <div className="hidden md:flex items-center mr-2">
                <Avatar className="h-6 w-6 mr-2 bg-gradient-to-r from-blue-500 to-purple-500">
                  <span className="text-xs text-white">{address ? address.slice(0, 2) : ""}</span>
                </Avatar>
              </div>
              <div className="flex items-center">
                <span className="text-sm font-medium text-white mr-1">
                  {address ? `${address.slice(0, 6)}...${address.slice(-4)}` : ""}
                </span>
                <Button variant="ghost" size="icon" onClick={() => copy(address || "")} className="h-6 w-6 rounded-full text-white">
                  {hasCopied ? <Check className="h-3 w-3" /> : <Copy className="h-3 w-3" />}
                  <span className="sr-only">Copy address</span>
                </Button>
              </div>
            </motion.div>
          )}
            
            {isConnected && (
              <motion.div 
                className="flex items-center bg-white/10 backdrop-blur-md p-2 rounded-lg text-sm border border-white/20"
                variants={fadeInVariants}
              >
                <div className="hidden md:flex items-center mr-2">
                  <Avatar className="h-6 w-6 mr-2 bg-gradient-to-r from-blue-500 to-purple-500">
                    <span className="text-xs text-white">{address?.slice(0, 2)}</span>
                  </Avatar>
                </div>
                <div className="flex items-center">
                  <span className="text-sm font-medium text-white mr-1">
                    {address?.slice(0, 6)}...{address?.slice(-4)}
                  </span>
                  <Button variant="ghost" size="icon" onClick={() => copy(address)} className="h-6 w-6 rounded-full text-white">
                    {hasCopied ? <Check className="h-3 w-3" /> : <Copy className="h-3 w-3" />}
                    <span className="sr-only">Copy address</span>
                  </Button>
                </div>
              </motion.div>
            )}
          </div>
        </motion.div>

        {!isConnected ? (
          <>
            <motion.div variants={itemVariants}>
              <ConnectWalletCard onConnect={async () => { await handleConnectWallet(); }} />
            </motion.div>

            <motion.div variants={itemVariants} className="mt-8">
              <Card className="overflow-hidden border-2 border-dashed border-primary/20 bg-white/5 backdrop-blur-md">
                <CardHeader className="bg-gradient-to-r from-amber-500/20 to-purple-500/20">
                  <CardTitle className="flex items-center gap-2 text-white">
                    <Sparkles className="h-5 w-5 text-amber-400" />
                    AI-Enhanced Features Preview
                  </CardTitle>
                  <CardDescription className="text-gray-300">
                    Connect your wallet to unlock these smart features
                  </CardDescription>
                </CardHeader>
                <CardContent className="pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    {[
                      { title: "Smart Insights", icon: Lightbulb, description: "Get AI-powered recommendations for your portfolio." },
                      { title: "Smart Swaps", icon: ArrowUpDown, description: "AI finds the best swap rates and timing for your trades." },
                      { title: "AI Assistant", icon: MessageSquare, description: "Chat with your personal AI financial assistant." }
                    ].map((feature, index) => (
                      <motion.div
                        key={feature.title}
                        variants={cardHoverVariants}
                        whileHover="hover"
                        className="bg-white/10 backdrop-blur-md rounded-lg border border-white/20"
                      >
                        <Card className="bg-transparent">
                          <CardHeader className="pb-2">
                            <div className="flex items-center gap-2">
                              <div className="bg-gradient-to-r from-blue-500/30 to-purple-500/30 p-2 rounded-full">
                                <feature.icon className="h-4 w-4 text-blue-300" />
                              </div>
                              <CardTitle className="text-sm text-white">{feature.title}</CardTitle>
                            </div>
                          </CardHeader>
                          <CardContent className="text-xs text-gray-300">
                            <p>{feature.description}</p>
                          </CardContent>
                        </Card>
                      </motion.div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </motion.div>
            
            <motion.div variants={itemVariants} className="mt-8">
              <Card className="bg-white/10 backdrop-blur-md border border-white/20">
                <CardHeader>
                  <CardTitle className="text-white">QR Code Demo</CardTitle>
                </CardHeader>
                <CardContent className="flex flex-col items-center space-y-4">
                  <motion.div 
                    className="bg-white p-4 rounded-lg"
                    whileHover={{ scale: 1.05 }}
                    transition={{ type: "spring", stiffness: 400, damping: 10 }}
                  >
                    <QRCodeSVG
                      value={demoWalletAddress}
                      size={200}
                      level="H"
                      includeMargin={true}
                      bgColor={"#FFFFFF"}
                      fgColor={"#000000"}
                    />
                  </motion.div>
                  <div className="text-sm text-center text-white">
                    <p>Example wallet address QR code</p>
                    <p className="text-xs text-gray-300 mt-1 break-all">{demoWalletAddress}</p>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          </>
        ) : (
          <>
            <motion.div variants={itemVariants}>
              <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid grid-cols-4 mb-6 bg-white/10 backdrop-blur-md border border-white/20">
                  <TabsTrigger value="overview" className="flex items-center gap-2 text-white">
                    <PieChart className="h-4 w-4" />
                    <span className="hidden md:inline">Overview</span>
                  </TabsTrigger>
                  <TabsTrigger value="assets" className="flex items-center gap-2 text-white">
                    <Wallet className="h-4 w-4" />
                    <span className="hidden md:inline">Assets</span>
                  </TabsTrigger>
                  <TabsTrigger value="subscriptions" className="flex items-center gap-2 text-white">
                    <Bell className="h-4 w-4" />
                    <span className="hidden md:inline">Subscriptions</span>
                  </TabsTrigger>
                  <TabsTrigger value="assistant" className="flex items-center gap-2 relative text-white">
                    <MessageSquare className="h-4 w-4" />
                    <span className="hidden md:inline">AI Assistant</span>
                    <motion.div 
                      className="absolute -top-1 -right-1 h-2 w-2 rounded-full bg-gradient-to-r from-blue-500 to-purple-500"
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ repeat: Infinity, duration: 2 }}
                    />
                  </TabsTrigger>
                </TabsList>

                <TabsContent value="overview" className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <motion.div variants={cardHoverVariants} whileHover="hover">
                      <Card className="md:col-span-2 bg-white/10 backdrop-blur-md border border-white/20">
                        <CardHeader className="pb-2 bg-gradient-to-r from-blue-500/20 to-purple-500/20">
                          <CardTitle className="text-lg flex items-center justify-between text-white">
                            Portfolio Overview
                            <Badge variant="outline" className="text-xs bg-amber-50/80 text-amber-900 border-amber-200">
                              <motion.div
                                animate={{ rotate: isAnalyzing ? 360 : 0 }}
                                transition={{ duration: 2, repeat: isAnalyzing ? Infinity : 0, ease: "linear" }}
                              >
                                <Sparkles className="h-3 w-3 mr-1" />
                              </motion.div>
                              AI Analysis
                            </Badge>
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-4">
                            <div className="flex items-center justify-between">
                              <div>
                                <p className="text-sm font-medium text-gray-300">Total Balance</p>
                                <h3 className="text-2xl font-bold text-white">$12,453.21</h3>
                                <div className="flex items-center mt-1">
                                  <Badge variant="outline" className="bg-green-50/80 text-green-700 text-xs">
                                    <ArrowUp className="h-3 w-3 mr-1" />
                                    +5.2%
                                  </Badge>
                                  <span className="text-xs text-gray-300 ml-2">Past 24h</span>
                                </div>
                              </div>
                              <div className="text-right">
                                <div className="flex flex-col items-end">
                                  <span className="text-sm font-medium text-gray-300">AI Portfolio Score</span>
                                  <div className="flex items-center mt-1">
                                    <span className="text-xl font-semibold text-white mr-2">{portfolioScore}/100</span>
                                    <TooltipProvider>
                                      <Tooltip>
                                        <TooltipTrigger>
                                          <Lightbulb className="h-4 w-4 text-amber-400" />
                                        </TooltipTrigger>
                                        <TooltipContent>
                                          <p className="max-w-xs">This score reflects portfolio diversification, risk level, and optimization opportunities.</p>
                                        </TooltipContent>
                                      </Tooltip>
                                    </TooltipProvider>
                                  </div>
                                  <Progress value={portfolioScore} className="h-2 w-32 mt-1 bg-white/20" />
                                </div>
                              </div>
                            </div>
                            <div className="mt-4 border rounded-lg p-4 bg-white/5 backdrop-blur-md">
                              <h4 className="text-sm font-medium mb-2 text-white">Asset Distribution</h4>
                              <div className="flex gap-1 h-8">
                                <motion.div 
                                  className="bg-gradient-to-r from-blue-500 to-blue-700 rounded-l-sm" 
                                  style={{ width: "65%" }}
                                  initial={{ width: 0 }}
                                  animate={{ width: "65%" }}
                                  transition={{ duration: 1 }}
                                />
                                <motion.div 
                                  className="bg-gradient-to-r from-green-500 to-green-700" 
                                  style={{ width: "20%" }}
                                  initial={{ width: 0 }}
                                  animate={{ width: "20%" }}
                                  transition={{ duration: 1, delay: 0.2 }}
                                />
                                <motion.div 
                                  className="bg-gradient-to-r from-purple-500 to-purple-700" 
                                  style={{ width: "10%" }}
                                  initial={{ width: 0 }}
                                  animate={{ width: "10%" }}
                                  transition={{ duration: 1, delay: 0.4 }}
                                />
                                <motion.div 
                                  className="bg-gradient-to-r from-amber-500 to-amber-700 rounded-r-sm" 
                                  style={{ width: "5%" }}
                                  initial={{ width: 0 }}
                                  animate={{ width: "5%" }}
                                  transition={{ duration: 1, delay: 0.6 }}
                                />
                              </div>
                              <div className="flex justify-between mt-2 text-xs text-gray-300">
                                <div className="flex items-center">
                                  <div className="h-2 w-2 bg-blue-500 rounded-full mr-1"></div>
                                  ETH (65%)
                                </div>
                                <div className="flex items-center">
                                  <div className="h-2 w-2 bg-green-500 rounded-full mr-1"></div>
                                  USDC (20%)
                                </div>
                                <div className="flex items-center">
                                  <div className="h-2 w-2 bg-purple-500 rounded-full mr-1"></div>
                                  MATIC (10%)
                                </div>
                                <div className="flex items-center">
                                  <div className="h-2 w-2 bg-amber-500 rounded-full mr-1"></div>
                                  Other (5%)
                                </div>
                              </div>
                            </div>
                            <div className="flex flex-col md:flex-row gap-4 mt-4">
                              <Button className="flex-1 bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600">View All Assets</Button>
                              <Button 
                                variant="outline" 
                                className="flex-1 flex items-center justify-center gap-2 bg-white/10 border-white/20 text-white"
                                onClick={handleAnalyzePortfolio}
                                disabled={isAnalyzing}
                              >
                                {isAnalyzing ? (
                                  <>
                                    <motion.div
                                      animate={{ rotate: 360 }}
                                      transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                                    >
                                      <Sparkles className="h-4 w-4" />
                                    </motion.div>
                                    Analyzing...
                                  </>
                                ) : (
                                  <>
                                    <Sparkles className="h-4 w-4" />
                                    Analyze with AI
                                  </>
                                )}
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </motion.div>
                    
                    <motion.div variants={cardHoverVariants} whileHover="hover">
                      <Card className="bg-white/10 backdrop-blur-md border border-white/20">
                        <CardHeader className="pb-2 bg-gradient-to-r from-amber-500/20 to-purple-500/20">
                          <CardTitle className="text-lg flex items-center justify-between text-white">
                            AI Insights
                            <motion.button 
                              className="text-xs text-gray-300"
                              onClick={() => setShowAISettings(!showAISettings)}
                            >
                              <Settings className="h-4 w-4" />
                            </motion.button>
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <AnimatePresence>
                            {showAISettings && (
                              <motion.div 
                                className="mb-4 bg-white/5 backdrop-blur-md p-3 rounded-lg text-xs"
                                initial={{ height: 0, opacity: 0 }}
                                animate={{ height: "auto", opacity: 1 }}
                                exit={{ height: 0, opacity: 0 }}
                              >
                                <h4 className="font-medium mb-2 text-white">AI Settings</h4>
                                <div className="space-y-2">
                                  <div className="flex items-center justify-between">
                                    <span className="text-gray-300">Risk tolerance</span>
                                    <Badge variant="outline" className="bg-white/10 text-white">Medium</Badge>
                                  </div>
                                  <div className="flex items-center justify-between">
                                    <span className="text-gray-300">Investment horizon</span>
                                    <Badge variant="outline" className="bg-white/10 text-white">Long-term</Badge>
                                  </div>
                                  <div className="flex items-center justify-between">
                                    <span className="text-gray-300">Insight frequency</span>
                                    <Badge variant="outline" className="bg-white/10 text-white">Daily</Badge>
                                  </div>
                                </div>
                              </motion.div>
                            )}
                          </AnimatePresence>
                          {isAnalyzing ? (
                            <div className="space-y-4">
                              <Skeleton className="h-20 w-full rounded-lg bg-white/10" />
                              <Skeleton className="h-20 w-full rounded-lg bg-white/10" />
                              <Skeleton className="h-20 w-full rounded-lg bg-white/10" />
                            </div>
                          ) : showAIInsights ? (
                            <div className="space-y-3 max-h-[400px] overflow-y-auto pr-1">
                              {mockInsights.map((insight, index) => (
                                <motion.div
                                  key={insight.id}
                                  initial={{ opacity: 0, y: 20 }}
                                  animate={{ opacity: 1, y: 0 }}
                                  transition={{ delay: index * 0.1 }}
                                  variants={cardHoverVariants}
                                  whileHover="hover"
                                >
                                  <Card className={`bg-white/10 backdrop-blur-md border-l-4 border ${
                                    insight.impact === 'high' ? 'border-l-red-500' : 
                                    insight.impact === 'medium' ? 'border-l-amber-500' : 'border-l-green-500'
                                  } border-white/20`}>
                                    <CardContent className="p-3">
                                      <div className="flex items-start justify-between">
                                        <div>
                                          <h4 className="text-sm font-medium flex items-center gap-1 text-white">
                                            {insight.type === 'suggestion' && <Lightbulb className="h-3 w-3 text-amber-400" />}
                                            {insight.type === 'alert' && <Bell className="h-3 w-3 text-red-400" />}
                                            {insight.type === 'opportunity' && <Zap className="h-3 w-3 text-green-400" />}
                                            {insight.title}
                                          </h4>
                                          <p className="text-xs text-gray-300 mt-1">{insight.description}</p>
                                        </div>
                                        <Badge variant="outline" className="text-xs bg-white/10 text-white">
                                          {insight.impact === 'high' && 'High Impact'}
                                          {insight.impact === 'medium' && 'Medium Impact'}
                                          {insight.impact === 'low' && 'Low Impact'}
                                        </Badge>
                                      </div>
                                      <div className="flex justify-end mt-2">
                                        <Button variant="ghost" size="sm" className="h-7 text-xs text-white">Apply</Button>
                                        <Button variant="ghost" size="sm" className="h-7 text-xs text-white">Dismiss</Button>
                                      </div>
                                    </CardContent>
                                  </Card>
                                </motion.div>
                              ))}
                            </div>
                          ) : (
                            <div className="flex flex-col items-center justify-center h-[200px] text-center">
                              <Sparkles className="h-10 w-10 text-gray-300 mb-2" />
                              <p className="text-sm text-gray-300">
                                Click "Analyze with AI" to get personalized insights
                              </p>
                              <Button 
                                variant="outline" 
                                size="sm" 
                                className="mt-4 bg-white/10 text-white border-white/20"
                                onClick={handleAnalyzePortfolio}
                              >
                                Analyze Now
                              </Button>
                            </div>
                          )}
                        </CardContent>
                      </Card>
                    </motion.div>
                  </div>
                  <motion.div variants={cardHoverVariants} whileHover="hover">
                    <Card className="bg-white/10 backdrop-blur-md border border-white/20">
                      <CardHeader className="pb-2 bg-gradient-to-r from-blue-500/20 to-purple-500/20">
                        <CardTitle className="text-lg text-white">Recent Transactions</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          {[
                            { type: "Received ETH", date: "May 10, 2025 • 14:23", amount: "+0.15 ETH", usd: "$421.32", icon: ArrowDown, color: "green" },
                            { type: "Swapped ETH for USDC", date: "May 9, 2025 • 09:13", amount: "-0.3 ETH", usd: "+842.65 USDC", icon: ArrowUpDown, color: "blue" }
                          ].map((tx, index) => (
                            <motion.div
                              key={index}
                              initial={{ opacity: 0, x: -20 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ delay: index * 0.1 }}
                              className="flex items-center justify-between p-2 hover:bg-white/10 rounded-lg"
                            >
                              <div className="flex items-center">
                                <div className={`bg-${tx.color}-100/20 p-2 rounded-full mr-3`}>
                                  {tx.icon === ArrowDown ? (
                                    <ArrowDown className="h-4 w-4 text-green-300" />
                                  ) : (
                                    <ArrowUpDown className="h-4 w-4 text-blue-300" />
                                  )}
                                </div>
                                <div>
                                  <p className="text-sm font-medium text-white">{tx.type}</p>
                                  <p className="text-xs text-gray-400">{tx.date}</p>
                                </div>
                              </div>
                              <div className="text-right">
                                <p className="text-sm font-medium text-white">{tx.amount}</p>
                                <p className="text-xs text-gray-400">{tx.usd}</p>
                              </div>
                            </motion.div>
                          ))}
                        </div>
                      </CardContent>
                    </Card>
                  </motion.div>
                  <motion.div variants={itemVariants}>
                    <Card className="bg-gradient-to-br from-amber-50 to-orange-50 border-amber-100">
                      <CardHeader className="pb-2">
                        <CardTitle className="text-lg text-amber-800">AI Delegation</CardTitle>
                        <CardDescription className="text-amber-600">Enable AI-powered transactions</CardDescription>
                      </CardHeader>
{{ ... }}
                        <div className="flex items-center gap-2">
                          <Sparkles className="h-5 w-5 text-amber-500" />
                          <div className="text-sm text-amber-700">
                            {delegationComplete 
                              ? "AI delegation is active! Your AI assistant can now create tokens on your behalf."
                              : "Delegate token creation capabilities to your AI assistant"}
                          </div>
                        </div>
                        <Button 
                          variant={delegationComplete ? "outline" : "default"}
                          className={delegationComplete ? "text-amber-600 border-amber-300 mt-2" : "bg-amber-600 hover:bg-amber-700 text-white mt-2"}
                          onClick={handleDelegationSetup}
                          disabled={isCreatingAccounts || isCreatingDelegation}
                        >
                          {isCreatingAccounts || isCreatingDelegation ? (
                            <>
                              <motion.div
                                animate={{ rotate: 360 }}
                                transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                                className="mr-2"
                              >
                                <Sparkles className="h-4 w-4" />
                              </motion.div>
                              {isCreatingAccounts ? "Setting up accounts..." : "Creating delegation..."}
                            </>
                          ) : delegationComplete ? (
                            "View Delegation Details"
                          ) : (
                            "Setup AI Delegation"
                          )}
                        </Button>
                      </CardContent>
                    </Card>
                  </motion.div>
                </TabsContent>
              </Tabs>
            </motion.div>

                <ConnectWalletModal
                  isOpen={isConnectWalletModalOpen}
                  onClose={handleCloseConnectWalletModal}
                  onConnect={async () => { await handleConnectWallet(); }}
                />
            
            {/* AI Delegation Modal */}
            <Dialog 
              open={isDelegationModalOpen} 
              onOpenChange={setIsDelegationModalOpen}
            >
              <DialogContent className="sm:max-w-md rounded-xl">
                <DialogHeader>
                  <DialogTitle>AI Delegation</DialogTitle>
                  <DialogDescription>
                    {delegationComplete 
                      ? "Your AI delegation is active and ready to use" 
                      : "Delegate token creation capabilities to your AI assistant"}
                  </DialogDescription>
                </DialogHeader>
                <div className="flex flex-col gap-4 py-4">
                  {delegationError && (
                    <div className="bg-red-50 text-red-800 p-3 rounded-lg text-sm">
                      {delegationError}
                    </div>
                  )}
                  
                  {delegationComplete ? (
                    <div className="space-y-4">
                      <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                        <div className="flex items-center gap-2 text-green-800 font-medium mb-2">
                          <Check className="h-5 w-5 text-green-600" />
                          Delegation Active
                        </div>
                        <p className="text-sm text-green-700 mb-2">
                          Your AI assistant can now create tokens on your behalf using your delegated permissions.
                        </p>
                        <div className="text-xs text-green-600 space-y-1">
                          <div><strong>Delegator:</strong> {delegatorAccount?.address.slice(0, 6)}...{delegatorAccount?.address.slice(-4)}</div>
                          <div><strong>Delegate:</strong> {aiDelegateAccount?.address.slice(0, 6)}...{aiDelegateAccount?.address.slice(-4)}</div>
                          <div><strong>Permissions:</strong> Create tokens only (ERC-20)</div>
                        </div>
                      </div>
                      
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={() => setIsDelegationModalOpen(false)}
                      >
                        Close
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm text-blue-700">
                        <p className="mb-2">
                          <strong>What is AI Delegation?</strong>
                        </p>
                        <p className="mb-2">
                          AI Delegation allows your AI assistant to perform specific actions on your behalf, such as creating new tokens.
                        </p>
                        <p>
                          Your permissions are strictly limited to the actions you approve, and you can revoke access at any time.
                        </p>
                      </div>
                      
                      <Button 
                        className="w-full"
                        onClick={handleCreateDelegation}
                        disabled={isCreatingAccounts || isCreatingDelegation}
                      >
                        {isCreatingAccounts || isCreatingDelegation ? (
                          <>
                            <motion.div
                              animate={{ rotate: 360 }}
                              transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                              className="mr-2"
                            >
                              <Sparkles className="h-4 w-4" />
                            </motion.div>
                            {isCreatingAccounts ? "Setting up accounts..." : "Creating delegation..."}
                          </>
                        ) : (
                          "Create AI Delegation"
                        )}
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        className="w-full"
                        onClick={() => setIsDelegationModalOpen(false)}
                      >
                        Cancel
                      </Button>
                    </div>
                  )}
                </div>
              </DialogContent>
            </Dialog>
            {selectedAsset && (
              <>
                <SendAssetModal
                  isOpen={isSendModalOpen}
                  onClose={handleCloseSendModal}
                  asset={selectedAsset as unknown as import('@/lib/store/use-wallet-store').Asset}
                />
                <ReceiveAssetModal
                  isOpen={isReceiveModalOpen}
                  onClose={handleCloseReceiveModal}
                  asset={selectedAsset as unknown as import('@/lib/store/use-wallet-store').Asset}
                  walletAddress={address || ''}
                />
                <SwapAssetsModal
                  isOpen={isSwapModalOpen}
                  onClose={handleCloseSwapModal}
                  fromAsset={selectedAsset as unknown as import('@/lib/store/use-wallet-store').Asset}
                />
              </>
            )}
          </>
        )}
      </motion.div>
    </div>
  )
}